apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

def final yourApplicationId = 'in.avimarine.racecommittee'
android.variantFilter { variant ->
    if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'dev') {
        variant.setIgnore(true)
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "RaceCommittee"
        property "sonar.projectKey", "AVICommittee"
        //property "sonar.exclusions","build/**,**/*.png"
        //property "sonar.import_unknown_files", true
        //property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
    }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        if (!System.getenv("TRAVIS")) {
            release {
                // Load keystore
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile = file(keystoreProperties['storeFile'])
                storePassword = keystoreProperties['storePassword']
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
            }
        }
    }
    compileSdkVersion 27
    defaultConfig {
        applicationId "in.avimarine.racecommittee"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "standard"
    productFlavors {
        dev {
            dimension "standard"
            applicationIdSuffix ".dev"
            //Reference them again so they get overwritten by the flavor.
            buildConfigField "String", "ACCOUNT_TYPE", "\"${applicationId}.account\""
            buildConfigField "String", "AUTHORITY", "\"${applicationId}.provider\""
        }
        stage {
            dimension "standard"
            applicationIdSuffix ".stage"
            //Reference them again so they get overwritten by the flavor.
            buildConfigField "String", "ACCOUNT_TYPE", "\"${applicationId}.account\""
            buildConfigField "String", "AUTHORITY", "\"${applicationId}.provider\""
        }
        production {
            dimension "standard"
            //Reference them again so they get overwritten by the flavor.
            buildConfigField "String", "ACCOUNT_TYPE", "\"${applicationId}.account\""
            buildConfigField "String", "AUTHORITY", "\"${applicationId}.provider\""
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
//    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(":orccertificatesimporter")
    implementation project(":orcscorerxmlparser")
    implementation 'com.android.support:design:27.1.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
//apply plugin: 'com.google.gms.google-services'

